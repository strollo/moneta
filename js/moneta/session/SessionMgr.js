Ext.define("moneta.daemons.InactivityMonitor", { 	extend: 'Ext.util.Observable',	config: {		id: moneta.Globals.id.TH_INACTIVITY_MON,		pollUrl: "index.php",		messageBoxConfig: {}, // allows developers to override the appearance of the messageBox    },	    constructor: function(config) {   			//this.mixins.observable.constructor.call(this, config);		this.addEvents('timeout');		Ext.apply(this, config);				console.log('Creating InactivityMonitor');		this.callParent([Ext.apply(this.config, config)]);				var me = this;		        if (moneta.SessionMrg.Config.inactivityTimeout >= moneta.Globals.consts.ONEMINUTE) {            this._pollTask = Ext.TaskManager.start({                run: function () {                    var params = {};                    params[moneta.SessionMrg.Config.pollActionParam] = moneta.SessionMrg.Config.pollAction;					console.log('pollTask: requesting url: ' + this.pollUrl + ' params: ' + moneta.SessionMrg.Config.pollActionParam + ' -> ' + moneta.SessionMrg.Config.pollAction);                    Ext.Ajax.request({						url: this.pollUrl,						method: 'GET',						params: params,						success: function(response){							var result = moneta.Globals.handlers.checkAjaxResponse(response);							if (result) {								moneta.Globals.fn.resetTimeout(this);							}						},					});					                },                interval: moneta.SessionMrg.Config.pollInterval,                scope: this            });                   }				console.log('Timeout handlers');		var body = Ext.getBody();		body.on("click", moneta.Globals.fn.resetTimeout, this);        body.on("keypress", moneta.Globals.fn.resetTimeout, this);    },        destroy: function() {        var body = Ext.getBody();        body.un("click", moneta.Globals.fn.resetTimeout, this);        body.un("keypress", moneta.Globals.fn.resetTimeout, this);		Ext.TaskManager.stop(this._pollTask);		this._inactivityTask.cancel();		Ext.TaskManager.stop(this._countdownTask);    },                // private stuff    _pollTask: null, // task to poll server    _countdownTask: null, // ONESECOND interval for updating countdown MessageBox    _countdownMessage: null, // countdown MessageBox    _inactivityTask: null, // task to start countdown    _beginCountdown: function () {        var config = Ext.apply({            buttons: {ok: "Keep Working"},            closable: true,            fn: function (btn) {                Ext.TaskManager.stop(this._countdownTask);				moneta.Globals.fn.resetTimeout(this);            },            msg: "Your session has been idle for too long.  Click the button to keep working.",            progress: true,            scope: this,            title: "Inactivity Warning"        }, this.messageBoxConfig);        if (!this._countdownMessage) {			// only create the MessageBox once            this._countdownMessage = Ext.MessageBox.show(config);        }        var win = this._countdownMessage;        if (!win.isVisible()) {            win.show(config);        }        win.updateProgress(0);        win.seconds = 0;        this._countdownTask = Ext.TaskManager.start({            run: function () {				console.log('countdownTask');                win.seconds += 1;                if (win.seconds > moneta.SessionMrg.Config.messageBoxCountdown) {                    Ext.TaskManager.stop(this._countdownTask);                    this.fireEvent("timeout", this, win);                } else {                    win.updateProgress(win.seconds / moneta.SessionMrg.Config.messageBoxCountdown);                }            },            scope: this,            interval: moneta.Globals.consts.ONESECOND,        });    }});